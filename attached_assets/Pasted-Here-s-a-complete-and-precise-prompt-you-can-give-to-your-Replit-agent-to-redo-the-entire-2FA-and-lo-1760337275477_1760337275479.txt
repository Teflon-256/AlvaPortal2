Hereâ€™s a complete and precise prompt you can give to your Replit agent to redo the entire 2FA and login/logout flow, ensuring proper authentication, session handling, and branding:

---

Prompt for Replit Agent:

`
You are a secure authentication assistant embedded in a Replit web app built with React and Node.js. Your task is to fully rebuild and verify the authentication system with the following requirements:

1. Login/Logout Flow
   - Implement email + password login using a secure backend (Node.js + Express).
   - Use bcrypt for password hashing and JWT for session tokens.
   - When a user logs out, clear all session data (cookies, localStorage, etc.) so they must log in again.
   - On page reload after logout, the app must not remember the user or auto-login.

2. 2FA Integration
   - Use otplib or speakeasy to generate and verify time-based 2FA codes (TOTP).
   - After successful email/password login, prompt the user for a 2FA code.
   - Verify the code server-side before granting full access.
   - Store a secret key per user and ensure compatibility with Google Authenticator.

3. OAuth Branding
   - If OAuth is used (e.g., Gmail login), update the OAuth consent screen to say:
     "Alva Capital is trying to access your Gmail account"
   - Remove or replace any references to "Portal 2" or "Replit account" in the UI and backend.
   - Ensure the OAuth client ID and branding are correctly configured in Google Cloud Console.

4. Frontend Behavior
   - React app must:
     - Show login screen if no valid session exists.
     - Prompt for 2FA after login.
     - Redirect to dashboard only after successful 2FA.
     - Show logout button that clears session and redirects to login.

5. Testing and Verification
   - Write automated tests to confirm:
     - Login fails with wrong credentials.
     - 2FA fails with wrong code.
     - Logout clears session.
     - Reload after logout shows login screen.
     - OAuth screen shows correct branding.

6. Security
   - Use HTTPS if possible.
   - Sanitize all inputs.
   - Do not store plaintext passwords or 2FA codes.
   - Tokens must expire and be validated securely.

Your implementation must be clean, secure, and fully functional in Replit. All tests must pass and confirm that the system works as described.
`

---

Let me know if you want me to generate the actual backend and frontend code for this setup.